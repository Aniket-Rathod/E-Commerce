{"ast":null,"code":"import axios from \"axios\";\nimport { AIP_BASE_URL } from \"../../config/apiConfig\";\nimport { GET_USER_FAILURE, GET_USER_REQUEST, GET_USER_SUCCESS, LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT, REGISTER_FAILURE, REGISTER_REQUEST, REGISTER_SUCCESS } from \"./ActionType\";\nconst token = localStorage.getItem(\"jwt\");\n\n// Register Request Handling\n\nconst registerRequest = () => ({\n  type: REGISTER_REQUEST\n});\nconst registerSuccess = user => ({\n  type: REGISTER_SUCCESS,\n  payload: user\n});\nconst registerFailure = error => ({\n  type: REGISTER_FAILURE,\n  payload: error\n});\nexport const register = userData => async dispatch => {\n  dispatch(registerRequest());\n  try {\n    const response = await axios.post(`${AIP_BASE_URL}/auth/signup`, userData);\n    const user = response.data;\n    if (user.jwt) {\n      localStorage.setItem(\"jwt\", user.jwt);\n    }\n    dispatch(registerSuccess(user.jwt));\n  } catch (error) {\n    dispatch(registerFailure(error.message));\n  }\n};\n\n// Login Request Handling\n\nconst loginRequest = () => ({\n  type: LOGIN_REQUEST\n});\nconst loginSuccess = user => ({\n  type: LOGIN_SUCCESS,\n  payload: user\n});\nconst loginFailure = error => ({\n  type: LOGIN_FAILURE,\n  payload: error\n});\nexport const login = userData => async dispatch => {\n  dispatch(loginRequest());\n  try {\n    const response = await axios.post(`${AIP_BASE_URL}/auth/signup`, userData);\n    const user = response.data;\n    if (user.jwt) {\n      localStorage.setItem(\"jwt\", user.jwt);\n    }\n    dispatch(loginSuccess(user.jwt));\n  } catch (error) {\n    dispatch(loginFailure(error.message));\n  }\n};\n\n// User Request Handling\n\nconst getUserRequest = () => ({\n  type: GET_USER_REQUEST\n});\nconst getUserSuccess = user => ({\n  type: GET_USER_SUCCESS,\n  payload: user\n});\nconst getUserFailure = error => ({\n  type: GET_USER_FAILURE,\n  payload: error\n});\nexport const getUser = () => async dispatch => {\n  dispatch(getUserRequest());\n  try {\n    const response = await axios.get(`${AIP_BASE_URL}/api/users/profile`, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    const user = response.data;\n    dispatch(getUserSuccess(user));\n  } catch (error) {\n    dispatch(getUserFailure(error.message));\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT,\n    payload: null\n  });\n};","map":{"version":3,"names":["axios","AIP_BASE_URL","GET_USER_FAILURE","GET_USER_REQUEST","GET_USER_SUCCESS","LOGIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGOUT","REGISTER_FAILURE","REGISTER_REQUEST","REGISTER_SUCCESS","token","localStorage","getItem","registerRequest","type","registerSuccess","user","payload","registerFailure","error","register","userData","dispatch","response","post","data","jwt","setItem","message","loginRequest","loginSuccess","loginFailure","login","getUserRequest","getUserSuccess","getUserFailure","getUser","get","headers","logout"],"sources":["C:/Users/ASUS/Desktop/Programming/Internship - Archer IT/Web Application/E-Commerce/frontend/src/State/Auth/Action.js"],"sourcesContent":["import axios from \"axios\"\r\nimport { AIP_BASE_URL } from \"../../config/apiConfig\"\r\nimport { GET_USER_FAILURE, GET_USER_REQUEST, GET_USER_SUCCESS, LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT, REGISTER_FAILURE, REGISTER_REQUEST, REGISTER_SUCCESS } from \"./ActionType\"\r\n\r\n\r\n\r\n\r\nconst token=localStorage.getItem(\"jwt\");\r\n\r\n// Register Request Handling\r\n\r\nconst registerRequest= () =>({type:REGISTER_REQUEST});\r\nconst registerSuccess= (user) =>({type:REGISTER_SUCCESS,payload:user});\r\nconst registerFailure= (error) =>({type:REGISTER_FAILURE,payload:error});\r\n\r\nexport const register=(userData)=> async (dispatch)=>{\r\n  dispatch(registerRequest())\r\n    try {\r\n        const response=await axios.post(`${AIP_BASE_URL}/auth/signup`,userData)\r\n        const user=response.data;\r\n        if(user.jwt){\r\n            localStorage.setItem(\"jwt\",user.jwt)\r\n        }\r\n        dispatch(registerSuccess(user.jwt))\r\n          \r\n    } catch (error) {\r\n      dispatch(registerFailure(error.message))\r\n\r\n    }\r\n}\r\n\r\n\r\n// Login Request Handling\r\n\r\nconst loginRequest= () =>({type:LOGIN_REQUEST});\r\nconst loginSuccess= (user) =>({type:LOGIN_SUCCESS,payload:user});\r\nconst loginFailure= (error) =>({type:LOGIN_FAILURE,payload:error});\r\n\r\n\r\nexport const login=(userData)=> async (dispatch)=>{\r\n  dispatch(loginRequest())\r\n    try {\r\n        const response=await axios.post(`${AIP_BASE_URL}/auth/signup`,userData)\r\n        const user=response.data;\r\n        if(user.jwt){\r\n            localStorage.setItem(\"jwt\",user.jwt)\r\n        }\r\n        dispatch(loginSuccess(user.jwt))\r\n          \r\n    } catch (error) {\r\n      dispatch(loginFailure(error.message))\r\n\r\n    }\r\n}\r\n\r\n\r\n// User Request Handling\r\n\r\nconst getUserRequest= () =>({type:GET_USER_REQUEST});\r\nconst getUserSuccess= (user) =>({type:GET_USER_SUCCESS,payload:user});\r\nconst getUserFailure= (error) =>({type:GET_USER_FAILURE,payload:error});\r\n\r\n\r\nexport const getUser=()=> async (dispatch)=>{\r\n  dispatch(getUserRequest())\r\n    try {\r\n        const response=await axios.get(`${AIP_BASE_URL}/api/users/profile`,{headers:{\"Authorization\":`Bearer ${token}`}})\r\n        const user=response.data;\r\n        dispatch(getUserSuccess(user))\r\n          \r\n    } catch (error) {\r\n      dispatch(getUserFailure(error.message))\r\n\r\n    }\r\n}\r\n\r\nexport const logout=()=>(dispatch)=>{\r\n  dispatch({type:LOGOUT,payload:null})\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}